plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    def env = { ->
        def code = project.hasProperty('env') ? env : "dev"
        return code
    }
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    flavorDimensions "saloonmestore"
    def code = 1
    def major = 1
    def minor = 0
    def patch = 0
    def suffix = ""
    def app_name = "saloonmeStore"
    def url = ""
    def slider_url = ""
    def versionPropFile = file('version.properties')
    if (versionPropFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropFile))
        major = versionProps['major'].toInteger()
        minor = versionProps['minor'].toInteger()
        patch = versionProps['patch'].toInteger()
        code = versionProps['code'].toInteger()
    }
    defaultConfig {
        applicationId "com.ezeetech.saloonme.store"
        minSdkVersion 26
        targetSdkVersion 29
        renderscriptTargetApi 29
        renderscriptSupportModeEnabled true
        versionCode code
        versionName major + "." + minor + "." + patch
        signingConfig signingConfigs.debug
        multiDexEnabled true
        resConfigs "en"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        dataBinding true
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            debuggable false
            renderscriptDebuggable false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            renderscriptDebuggable true
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    productFlavors {
        if (env() == "dev" || env() == "all") {
            def debugFile = file('dev.properties')
            if (debugFile.canRead()) {
                dev {
                    dimension "saloonmestore"
                    Properties debugProps = new Properties()
                    debugProps.load(new FileInputStream(debugFile))
                    suffix = debugProps['suffix'].toString()
                    app_name = debugProps['app.name'].toString()
                    url = debugProps['web.url'].toString()
                    slider_url = debugProps['web.sliderUrl'].toString()
                    versionNameSuffix suffix
                    resValue "string", "app_name", app_name
                    buildConfigField "String", "WEB_SERVICE_URL", url
                    buildConfigField "String", "WEB_SLIDER_URL", slider_url
                }
            }
        }
        if (env() == "prod" || env() == "all") {
            def prodFile = file('prod.properties')
            if (prodFile.canRead()) {
                prod {
                    dimension "saloonmestore"
                    Properties prodProps = new Properties()
                    prodProps.load(new FileInputStream(prodFile))
                    suffix = prodProps['suffix'].toString()
                    app_name = prodProps['app.name'].toString()
                    url = prodProps['web.url'].toString()
                    slider_url = debugProps['web.sliderUrl'].toString()
                    versionNameSuffix suffix
                    resValue "string", "app_name", app_name
                    buildConfigField "String", "WEB_SERVICE_URL", url
                    buildConfigField "String", "WEB_SLIDER_URL", slider_url
                }
            }
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            println("Version name: ${variant.versionName}")
            outputFileName = "saloonme_Store_${variant.versionName}_${variant.buildType.name}_${variant.versionCode}.apk"
        }
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':base')
    implementation project(':sociallogin')
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.4"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.4"

    //Image carousel
    // Optional: Circle Indicator (To fix the xml preview "Missing classes" error)
    implementation 'me.relex:circleindicator:2.1.4'
    implementation 'com.github.ImaginativeShohag:Why-Not-Image-Carousel:v1.1.0'

    //for circular image
    implementation 'de.hdodenhof:circleimageview:3.0.0'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.2.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'
    implementation 'com.google.android.gms:play-services-location:17.1.0'


    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}